{"version":3,"sources":["components/PhoneForm/PhoneForm.jsx","components/Contacts/Contacts.jsx","components/FilterContacts/FilterContacts.jsx","App.js","index.js"],"names":["PhoneForm","state","name","number","handleInputChange","e","data","currentTarget","value","setState","addToContacts","database","preventDefault","props","onSubmit","resetForm","this","type","pattern","title","required","onChange","Component","ContactsList","contact","FilterContacts","filter","onInputAdd","target","twoInOne","filterInput","App","formSubmitHandler","console","log","prevState","newItem","id","uuidv4","contacts","handleFilterField","info","Contacts","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RA6EeA,E,4MA1EbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,kBAAoB,SAACC,GACnB,IAAMC,EAAOD,EAAEE,cAAcC,MAC7B,EAAKC,SAAL,eAAiBJ,EAAEE,cAAcL,KAAOI,K,EAG1CI,cAAgB,SAACL,EAAGM,GAClBN,EAAEO,iBAmBF,EAAKC,MAAMC,SAAS,EAAKb,OACzB,EAAKc,a,EAGPA,UAAY,WACV,EAAKN,SAAS,CACZP,KAAM,GACNC,OAAQ,M,4CAIZ,WACE,OACE,uBAAMW,SAAUE,KAAKN,cAArB,UACE,yCAEE,uBACEO,KAAK,OACLf,KAAK,OACLgB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRZ,MAAOQ,KAAKf,MAAMC,KAClBmB,SAAUL,KAAKZ,uBAGnB,2CAEE,uBACEa,KAAK,MACLf,KAAK,SACLgB,QAAQ,yFACRC,MAAM,6iBACNC,UAAQ,EACRZ,MAAOQ,KAAKf,MAAME,OAClBkB,SAAUL,KAAKZ,uBAGnB,wBAAQa,KAAK,SAAb,oC,GArEgBK,a,gBCETC,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KC6DEC,E,4MA1DbxB,MAAQ,CACNyB,OAAQ,I,EAGVC,WAAa,SAACtB,GACZ,IAAMG,EAAQH,EAAEuB,OAAOpB,MACvB,EAAKC,SAAS,CAAEiB,OAAQlB,K,EAG1BqB,SAAW,SAACxB,GACV,EAAKsB,WAAWtB,GAChB,EAAKQ,MAAMC,SAAS,EAAKb,MAAMyB,S,EAGjCI,YAAc,SAACzB,GAGb,OACE,8BACE,sBAAMgB,SAAU,EAAKQ,SAArB,SACE,0DAEE,uBAAOZ,KAAK,OAAOf,KAAK,SAASmB,SAAU,EAAKQ,mB,4CAgB1D,WACE,OAEE,aADA,CACA,iBACE,0DAEE,uBACEZ,KAAK,OACLf,KAAK,SACLM,MAAOQ,KAAKf,MAAMyB,OAClBL,SAAUL,KAAKa,oB,GAjDEP,aC0GdS,E,kDApGb,aAAe,IAAD,8BACZ,gBAUFC,kBAAoB,SAAC1B,GACnB2B,QAAQC,IAAI5B,GACZ,EAAKG,UAAS,SAAC0B,GACb,IACMC,EAAU,CACdlC,KAAMI,EAAKJ,KACXC,OAAQG,EAAKH,OACbkC,GAAIC,eAIN,MAAO,CAAEC,SADH,sBAAOJ,EAAUI,UAAjB,CAA2BH,SArBvB,EA0BdI,kBAAoB,SAACC,GACnBR,QAAQC,IAAIO,GACZ,EAAKhC,SAAW,CAAEiB,OAAQe,IA5Bd,EA+BdrC,kBAAoB,SAACC,GACnB,IAAMC,EAAOD,EAAEE,cAAcC,MAC7B,EAAKC,SAAL,eAAiBJ,EAAEE,cAAcL,KAAOI,KA5BxC,EAAKL,MAAQ,CACXsC,SAAU,GACVb,OAAQ,IAPE,E,0CAqFd,WAEE,OADAO,QAAQC,IAAIlB,KAAKf,MAAMyB,QAErB,qCACE,2CACA,cAAC,EAAD,CAAWZ,SAAUE,KAAKgB,oBAC1B,2CACA,cAAC,EAAD,CAAgB1B,KAAMU,KAAKf,MAAOa,SAAUE,KAAKwB,oBAEjD,cAACE,EAAD,CAAcpC,KAAMU,KAAKf,e,GA/Ff0C,IAAMrB,WCHxBsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8c4665cf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass PhoneForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleInputChange = (e) => {\n    const data = e.currentTarget.value;\n    this.setState({ [e.currentTarget.name]: data });\n  };\n\n  addToContacts = (e, database) => {\n    e.preventDefault();\n    // this.setState((prevState)=>{\n    //   let newArr=[];\n    //   const newItem = {\n    //     name:this.state.name,\n    //     number:this.state.number,\n    //     id: uuidv4()\n    //   };\n\n    //   if(this.state.contacts.length !== 0){\n    //     newArr=[\n    //         ...prevState.contacts,\n    //        newItem\n    //       ]\n    //   }\n    //   newArr=[newItem]\n    //   console.log(newArr)\n    //   return {contacts: newArr}\n    // })\n    this.props.onSubmit(this.state);\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.addToContacts}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <button type=\"submit\">Add to contacts</button>\n      </form>\n    );\n  }\n}\n\nexport default PhoneForm;\n","function ContactsList({ contact }) {\n  return <p>{contact}</p>;\n}\n\nexport default ContactsList;\n","import React, { Component } from \"react\";\nimport ContactsList from \"components/Contacts/Contacts\";\n\nclass FilterContacts extends Component {\n  state = {\n    filter: \"\",\n  };\n\n  onInputAdd = (e) => {\n    const value = e.target.value;\n    this.setState({ filter: value });\n  };\n\n  twoInOne = (e) => {\n    this.onInputAdd(e);\n    this.props.onSubmit(this.state.filter);\n  };\n\n  filterInput = (e) => {\n    // const database=this.props.value.contacts;\n    // const filtered = database.filter(item => {return item.name.toLowerCase().includes(this.state.filter.toLowerCase())})\n    return (\n      <div>\n        <form onChange={this.twoInOne}>\n          <label>\n            Find contacts by name\n            <input type=\"text\" name=\"filter\" onChange={this.twoInOne} />\n          </label>\n        </form>\n        {/* <ContactsList value={filtered}/> */}\n        {/* <ul> \n             { filtered.map((item) => {\n              return (\n              <li key={item.id}>{item.name}: {item.number}</li>\n              );\n            })\n            } \n             </ul> */}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      // <>\n      <form>\n        <label>\n          Find contacts by name\n          <input\n            type=\"text\"\n            name=\"filter\"\n            value={this.state.filter}\n            onChange={this.twoInOne}\n          />\n        </label>\n      </form>\n      /* <ContactsList data={this.state} value={this.props.data.contacts}/>\n      </> */\n    );\n  }\n}\n\nexport default FilterContacts;\n","import PhoneForm from \"components/PhoneForm/PhoneForm\";\n// import ContactsList from \"components/Contacts/Contacts\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport FilterContacts from \"components/FilterContacts/FilterContacts\";\nimport ContactsList from \"components/Contacts/Contacts\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    // this.formSubmitHandler = this.formSubmitHandler.bind(this);\n    // this.filterField = this.filterField.bind(this);\n\n    this.state = {\n      contacts: [],\n      filter: \"\",\n    };\n  }\n\n  formSubmitHandler = (data) => {\n    console.log(data);\n    this.setState((prevState) => {\n      let newArr = [];\n      const newItem = {\n        name: data.name,\n        number: data.number,\n        id: uuidv4(),\n      };\n\n      newArr = [...prevState.contacts, newItem];\n      return { contacts: newArr };\n    });\n  };\n\n  handleFilterField = (info) => {\n    console.log(info);\n    this.setState = { filter: info };\n  };\n\n  handleInputChange = (e) => {\n    const data = e.currentTarget.value;\n    this.setState({ [e.currentTarget.name]: data });\n  };\n\n  // renderContacts = () => {\n  //   const database = this.state.contacts;\n  //   return(\n  //     <div>\n  //     <h2>Contacts: </h2>\n  //     <form onChange={this.filterContacts}>\n  //       <label>\n  //         Find contacts by name\n  //         <input type=\"text\" name=\"filter\" value={this.state.filter}\n  //             onChange={this.handleInputChange}/>\n  //       </label>\n  //     </form>\n  //     <ul>\n  //     { database.map((item) => {\n  //       return (\n  //       <li key={item.id}>{item.name}: {item.number}</li>\n  //       )\n  //     })\n  //     }\n  //     </ul>\n  //   </div>\n  //   )\n  // }\n\n  // filterContacts = (e)=> {\n  //   const database=this.state.contacts;\n  //   const filtered = database.filter((item) => item.name.toLowerCase().includes(this.state.filter.toLowerCase())\n  // );\n\n  //   return(  <div>\n  //     <h2>Contacts: </h2>\n  //     <form onChange={this.handleInputChange}>\n  //       <label>\n  //         Find contacts by name\n  //         <input type=\"text\" name=\"filter\"\n  //             onChange={this.handleInputChange}/>\n  //       </label>\n  //     </form>\n  //     <ul>\n  //     { filtered.map((item) => {\n  //       return (\n  //       <li key={item.id}>{item.name}: {item.number}</li>\n  //       )\n  //     })\n  //     }\n  //     </ul>\n  //   </div> )\n  // }\n\n  render() {\n    console.log(this.state.filter);\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <PhoneForm onSubmit={this.formSubmitHandler} />\n        <h2>Contacts:</h2>\n        <FilterContacts data={this.state} onSubmit={this.handleFilterField} />\n        {/* <this.filterContacts database={this.state.contacts}/> */}\n        <ContactsList data={this.state} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}